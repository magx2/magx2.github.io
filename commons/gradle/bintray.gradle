apply plugin: "com.jfrog.bintray"
apply plugin: 'maven'
apply plugin: 'maven-publish'

bintray {
	def conf = new BintrayConfig(bintrayConfig, project)
	user = conf.user
	key = conf.key

	publications = conf.publications
	dryRun = project.hasProperty('dryRun')
	publish = true
	pkg {
		repo = conf.repo
		name = "${conf.groupId}.${conf.name}"
		userOrg = conf.userOrg
		desc = conf.desc
		websiteUrl = conf.websiteUrl
		issueTrackerUrl = conf.issueTrackerUrl
		vcsUrl = conf.vcsUrl
		licenses = conf.licenses
		labels = conf.labels
		publicDownloadNumbers = conf.publicDownloadNumbers

		githubRepo = conf.githubRepo
		githubReleaseNotesFile = conf.githubReleaseNotesFile

		//noinspection GroovyAssignabilityCheck
		version {
			name = conf.versionName
			vcsTag = conf.versionVcsTag
			gpg {
				sign = true
				passphrase = conf.passphrase
			}
		}
	}
}

publishing {
	def conf = new BintrayConfig(bintrayConfig, project)
	publications {
		BintrayProjectPublication(MavenPublication) {
			from components.java
			groupId conf.groupId
			artifactId conf.name
			version conf.versionName

			artifact sourceJar {
				classifier "sources"
			}
		}
	}
}

task sourceJar(type: Jar) {
	from sourceSets.main.allJava
}

@groovy.transform.ToString(includeNames=true)
class BintrayConfig {
	final project

	final String user
	final String key

	final List<String> publications
	final String repo
	final String groupId
	final String name
	final String userOrg
	final String desc
	final String websiteUrl
	final String issueTrackerUrl
	final String vcsUrl
	final List<String> licenses
	final List<String> labels
	final boolean publicDownloadNumbers
	final String githubRepo
	final String githubReleaseNotesFile

	final String versionName
	final String versionVcsTag

	final String passphrase

	BintrayConfig(def params, def project) {
		this.project = project

		this.user = parseUser(params.user)
		this.key = parseKey(params.key)

		this.publications = params.publications ?: ['BintrayProjectPublication']
		this.repo = Objects.requireNonNull(params.repo, "repo")
		this.groupId = params.groupId ?: project.group
		this.name = params.name ?: project.name
		this.userOrg = Objects.requireNonNull(params.userOrg, "userOrg")
		this.desc = parseDesc(params.desc)
		this.websiteUrl = Objects.requireNonNull(params.websiteUrl, "websiteUrl")
		this.issueTrackerUrl = Objects.requireNonNull(params.issueTrackerUrl, "issueTrackerUrl")
		this.vcsUrl = Objects.requireNonNull(params.vcsUrl, "vcsUrl")
		if(!vcsUrl.endsWith(".git")) {
			throw new IllegalArgumentException("vcsUrl needs to end with \".git\". $vcsUrl")
		}
		this.licenses = Objects.requireNonNull(params.licenses, "licenses")
		this.labels = params.labels ?: []
		this.publicDownloadNumbers = params.hasProperty('publicDownloadNumbers') ? params.publicDownloadNumbers : true
		this.githubRepo = Objects.requireNonNull(params.githubRepo, "githubRepo")
		this.githubReleaseNotesFile = params.githubReleaseNotesFile ?: "README.md"

		this.versionName = parseVersionName(params.versionName)
		this.versionVcsTag = parseVersionTag(params.versionVcsTag)

		this.passphrase = parsePassphrase(params.passphrase)
	}

	private String parseUser(String user) {
		if (user) {
			return user
		} else if (project.hasProperty("bintrayUser")) {
			return project.property("bintrayUser")
		} else if(System.getenv('BINTRAY_USER')) {
			return System.getenv('BINTRAY_USER')
		} else {
			throw new IllegalArgumentException("Please pass \"user\"")
		}
	}

	private String parseKey(String key) {
		if (key) {
			return key
		} else if (project.hasProperty("bintrayKey")) {
			return project.property("bintrayKey")
		} else if(System.getenv('BINTRAY_KEY')) {
			return System.getenv('BINTRAY_KEY')
		} else {
			throw new IllegalArgumentException("Please pass \"key\"")
		}
	}

	private String parseDesc(String desc) {
		if (desc) {
			return desc
		} else if (project.description) {
			return project.description
		} else {
			throw new IllegalArgumentException("Please pass \"desc\"")
		}
	}

	private String parseVersionName(String versionName) {
		def all = (versionName ?: project.version).replaceAll("-SNAPSHOT", '') as String
		if(!all) {
			throw new IllegalArgumentException("There is no version!")
		}
		return all
	}

	private String parseVersionTag(String versionTag) {
		return 'v' + (versionTag ?: versionName)
	}

	private String parsePassphrase(String passphrase) {
		def defaultPassphrase = "${project.name}Passphrase"
		if (passphrase) {
			return passphrase
		} else if (project.hasProperty(defaultPassphrase)) {
			return project.property(defaultPassphrase)
		} else if(System.getenv(defaultPassphrase)) {
			return System.getenv(defaultPassphrase)
		} else {
			throw new IllegalArgumentException("Please provide \"passphrase\". If you want to do this in `gradle.properties` name it $defaultPassphrase")
		}
	}
}