apply plugin: "com.jfrog.bintray"

bintray {
	def conf = new BintrayConfig(bintrayConfig)
	user = conf.user
	key = conf.key

	publications = conf.publications
	dryRun = project.hasProperty('dryRun')
	publish = true
	pkg {
		repo = conf.repo
		name = conf.groupId
		userOrg = conf.userOrg
		desc = conf.desc
		websiteUrl = conf.websiteUrl
		issueTrackerUrl = conf.issueTrackerUrl
		vcsUrl = conf.vcsUrl
		licenses = conf.licenses
		labels = conf.labels
		publicDownloadNumbers = conf.publicDownloadNumbers

		githubRepo = conf.githubRepo
		githubReleaseNotesFile = conf.githubReleaseNotesFile

		//noinspection GroovyAssignabilityCheck
		version {
			name = conf.versionName
			vcsTag = conf.versionVcsTag
			gpg {
				sign = true
				passphrase = conf.passphrase
			}
		}
	}
}

publishing {
	def conf = new BintrayConfig(bintrayConfig)
	publications {
		BintrayProjectPublication(MavenPublication) {
			from components.java
			groupId conf.groupId
			artifactId conf.name
			version conf.versionName

			artifact sourceJar {
				classifier "sources"
			}
		}
	}
}

class BintrayConfig {
	final String user
	final String key

	final List<String> publications
	final String repo
	final String groupId
	final String name
	final String userOrg
	final String desc
	final String websiteUrl
	final String issueTrackerUrl
	final String vcsUrl
	final List<String> licenses
	final List<String> labels
	final boolean publicDownloadNumbers
	final String githubRepo
	final String githubReleaseNotesFile

	final String versionName
	final String versionVcsTag

	final String passphrase

	BintrayConfig(Map params) {
		this(
				map.user,
				map.key,
				map.publications,
				map.repo,
				map.groupId,
				map.name,
				map.userOrg,
				map.desc,
				map.websiteUrl,
				map.issueTrackerUrl,
				map.vcsUrl,
				map.licenses,
				map.labels,
				map.publicDownloadNumbers,
				map.githubRepo,
				map.githubReleaseNotesFile,
				map.versionName,
				map.versionVcsTag,
				map.passphrase
		)
	}
	
	BintrayConfig(
			final String user = null,
			final String key = null,
			final List<String> publications = null,
			final String repo,
			final String groupId = null,
			final String name=null,
			final String userOrg,
			final String desc,
			final String websiteUrl,
			final String issueTrackerUrl,
			final String vcsUrl,
			final List<String> licenses,
			final List<String> labels,
			final boolean publicDownloadNumbers = true,
			final String githubRepo,
			final String githubReleaseNotesFile=null,
			final String versionName  = null,
			final String versionVcsTag = null,
			final String passphrase = null) {
		this.user = user ?: System.getenv('BINTRAY_USER')
		this.key = key ?: System.getenv('BINTRAY_KEY')

		this.publications = publications ?: ['BintrayProjectPublication']
		this.repo = Objects.requireNonNull(repo, "repo")
		this.groupId = groupId ?: project.group
		this.name = name ?: project.name
		this.userOrg = Objects.requireNonNull(userOrg, "userOrg")
		this.desc = Objects.requireNonNull(desc, "desc")
		this.websiteUrl = Objects.requireNonNull(websiteUrl, "websiteUrl")
		this.issueTrackerUrl = Objects.requireNonNull(issueTrackerUrl, "issueTrackerUrl")
		this.vcsUrl = Objects.requireNonNull(vcsUrl, "vcsUrl")
		this.licenses = Objects.requireNonNull(licenses, "licenses")
		this.labels = labels ?: []
		this.publicDownloadNumbers = publicDownloadNumbers
		this.githubRepo = Objects.requireNonNull(githubRepo,"githubRepo")
		this.githubReleaseNotesFile = githubReleaseNotesFile ?: "README.md"

		this.versionName = parserVersionName(versionName)
		this.versionVcsTag = parserVersionTag(versionVcsTag)
		this.passphrase = parsePassphrase(passphrase)
	}

	private String parserVersionName(String versionName) {
		return (versionName ?: project.version).replaceAll("-SNAPSHOT", '')
	}

	private String parserVersionTag(String versionTag) {
		return 'v' + (versionTag ?: project.version).replaceAll("-SNAPSHOT", '')
	}

	private String parsePassphrase(String passphrase) {
		def defaultPassphrase = "${project.name}Passphrase"
		if (passphrase) {
			return passphrase
		} else if (project.hasProperty(defaultPassphrase)) {
			return project.property(defaultPassphrase)
		} else {
			return System.getenv(defaultPassphrase)
		}
	}

}